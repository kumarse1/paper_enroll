üîπ Core POC Learnings:
Bounding Box Adaptation: Mixed typed and handwritten input caused localization drift; adaptive preprocessing and dynamic thresholding stabilized field detection.

OCR + Vision AI Strategy: Standard OCR failed on checkboxes and handwriting. Augmenting with Vision AI only where needed reduced costs while improving accuracy.

AI Input Batching: Sending too many data elements at once degraded LLM performance. Batching inputs (5‚Äì7 fields per request) boosted stability and throughput.

Schema-Driven Validation: Real-time Pydantic validation helped catch data anomalies (e.g., incorrect SSN or date formats) before storage or downstream use.

Human-in-the-Loop Review: Confidence-based verification UI ensured users could quickly review, correct, and approve extracted values ‚Äî balancing automation with control.

üîπ Innovation Extension ‚Äì From POC to Platform Capability
We're now extending this into a reusable onboarding framework with the following design:

AI Extraction + Human Verification + Dynamic Schema Validation ‚Üí Approved Data Loaded into Target Schema

Teams can onboard new forms without writing new code

Schemas are generated and validated dynamically

AI routes low-confidence or ambiguous fields to reviewers

Once approved, data is auto-loaded into structured storage for downstream use

üîÅ This approach simplifies the onboarding of any document or form type ‚Äî making the solution usable across teams without deep technical intervention.






rendering section

# ---------- Pyvis Graph Rendering ----------
net = Network(height="600px", width="100%", directed=True, bgcolor="#ffffff")
net.barnes_hut()
net.toggle_physics(True)

for node, attr in SG.nodes(data=True):
    color = color_map.get(attr["type"], "gray")
    net.add_node(node, label=node, title=attr["type"], color=color)

for src, tgt, attr in SG.edges(data=True):
    net.add_edge(src, tgt, title=attr["label"], label=attr["label"])

# Save graph to HTML
temp_dir = tempfile.mkdtemp()
html_path = os.path.join(temp_dir, "graph.html")
net.save_graph(html_path)

# Confirm file exists and read it
if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html = f.read()
        st.components.v1.html(html, height=600, scrolling=True)
else:
    st.error("‚ùå Graph could not be rendered.")
=================================





import pandas as pd
import networkx as nx
from pyvis.network import Network
import streamlit as st
import tempfile
import os

# ---------- Minimal CMDB-like Sample Data ----------
data = {
    "Parent/application": ["Pay.sys", "Pay.sys", "Claim.sys"],
    "component": ["Get Payment Amount", "Calculate Due", "Process Claim"],
    "sub component": ["Get Binder Due", "Check Discounts", "Validate ID"],
    "list of all servers app server that syupport application": ["payment-prod", "payment-prod", "claim-prod"],
    "db name": ["prod_pay", "prod_pay", "prod_claim"],
    "environment": ["production", "production", "staging"]
}

df = pd.DataFrame(data)

# ---------- Build Knowledge Graph ----------
G = nx.DiGraph()

color_map = {
    "application": "red",
    "component": "orange",
    "subcomponent": "yellow",
    "server": "green",
    "database": "blue",
    "environment": "purple"
}

for _, row in df.iterrows():
    app = row["Parent/application"]
    comp = row["component"]
    subcomp = row["sub component"]
    server = row["list of all servers app server that syupport application"]
    db = row["db name"]
    env = row["environment"]

    G.add_node(app, type="application")
    G.add_node(comp, type="component")
    G.add_node(subcomp, type="subcomponent")
    G.add_node(server, type="server")
    G.add_node(db, type="database")
    G.add_node(env, type="environment")

    G.add_edge(app, comp, label="has_component")
    G.add_edge(comp, subcomp, label="has_subcomponent")
    G.add_edge(app, server, label="hosted_on")
    G.add_edge(app, db, label="uses_database")
    G.add_edge(app, env, label="runs_in")

# ---------- Streamlit UI ----------
st.set_page_config(page_title="CMDB Knowledge Graph", layout="wide")
st.title("üìä CMDB Knowledge Graph - Executive View")

selected_app = st.selectbox("Select Application:", [n for n, d in G.nodes(data=True) if d["type"] == "application"])
show_subgraph = st.checkbox("Show Only Related Nodes", value=True)

# Subgraph
if show_subgraph:
    related = list(G.successors(selected_app)) + [selected_app]
    SG = G.subgraph(related).copy()
else:
    SG = G

# Pyvis setup
net = Network(height="600px", width="100%", directed=True)
net.barnes_hut()
net.toggle_physics(True)

for node, attr in SG.nodes(data=True):
    net.add_node(node, label=node, title=attr["type"], color=color_map.get(attr["type"], "gray"))

for src, tgt, attr in SG.edges(data=True):
    net.add_edge(src, tgt, label=attr["label"], title=attr["label"])

# Save and show
temp_dir = tempfile.mkdtemp()
html_path = os.path.join(temp_dir, "graph.html")
net.save_graph(html_path)
st.components.v1.html(open(html_path, "r", encoding="utf-8").read(), height=600)

# Optional text summary
st.markdown("### Connected Assets")
for neighbor in G.successors(selected_app):
    st.write(f"‚Ä¢ {neighbor} ({G.nodes[neighbor]['type']})")

















=================================================
import pandas as pd
import networkx as nx
from pyvis.network import Network
import streamlit as st
import tempfile
import os

# ----------------- Mock CMDB Data -----------------
data = {
    "Parent/application": ["Pay.sys", "Pay.sys", "Claim.sys"],
    "component": ["Get Payment Amount", "Calculate Due", "Process Claim"],
    "sub component": ["Get Binder Due", "Check Discounts", "Validate ID"],
    "list of all servers app server that syupport application": ["payment-prod", "payment-prod", "claim-prod"],
    "db name": ["prod_pay", "prod_pay", "prod_claim"],
    "environment": ["production", "production", "staging"]
}

df = pd.DataFrame(data)

# ----------------- Build Graph -----------------
G = nx.DiGraph()

node_colors = {
    "application": "red",
    "component": "orange",
    "subcomponent": "yellow",
    "server": "green",
    "database": "blue",
    "environment": "purple"
}

for _, row in df.iterrows():
    app = row["Parent/application"]
    comp = row["component"]
    subcomp = row["sub component"]
    server = row["list of all servers app server that syupport application"]
    db = row["db name"]
    env = row["environment"]

    G.add_node(app, type="application")
    G.add_node(comp, type="component")
    G.add_node(subcomp, type="subcomponent")
    G.add_node(server, type="server")
    G.add_node(db, type="database")
    G.add_node(env, type="environment")

    G.add_edge(app, comp, label="has_component")
    G.add_edge(comp, subcomp, label="has_subcomponent")
    G.add_edge(app, server, label="hosted_on")
    G.add_edge(app, db, label="uses_database")
    G.add_edge(app, env, label="runs_in")

# ----------------- Streamlit UI -----------------
st.set_page_config(page_title="CMDB Knowledge Graph", layout="wide")
st.title("üìä CMDB Knowledge Graph - Interactive Explorer")

# Application filter
app_nodes = [n for n, attr in G.nodes(data=True) if attr["type"] == "application"]
selected_app = st.selectbox("üîç Select an Application to Explore", options=app_nodes)

# View type toggle
show_subgraph = st.checkbox("üîó Show Only Related Nodes", value=True)

# Node color legend
st.markdown("### üß≠ Node Color Legend")
st.markdown("""
- üî¥ **Application**  
- üü† **Component**  
- üü° **Subcomponent**  
- üü¢ **Server**  
- üîµ **Database**  
- üü£ **Environment**
""")

# Subgraph creation
if show_subgraph:
    neighbors = list(G.successors(selected_app)) + [selected_app]
    SG = G.subgraph(neighbors).copy()
else:
    SG = G

# Pyvis Graph
net = Network(height="600px", width="100%", directed=True)
net.barnes_hut()
net.toggle_physics(True)

for node, attr in SG.nodes(data=True):
    color = node_colors.get(attr["type"], "gray")
    net.add_node(node, label=node, title=f"{attr['type']}", color=color)

for source, target, attr in SG.edges(data=True):
    net.add_edge(source, target, title=attr["label"], label=attr["label"])

# Save and display HTML
temp_dir = tempfile.mkdtemp()
html_path = os.path.join(temp_dir, "graph.html")
net.save_graph(html_path)

st.components.v1.html(open(html_path, "r", encoding="utf-8").read(), height=600)

# Show connected nodes
st.markdown("### üßæ Connected Nodes Summary")
if show_subgraph:
    st.write(f"**{selected_app}** is connected to:")
    for neighbor in G.successors(selected_app):
        st.write(f"- {neighbor} ({G.nodes[neighbor]['type']})")
else:
    st.write("Full graph view is enabled.")







=============================================

import pandas as pd
import networkx as nx
from pyvis.network import Network
import streamlit as st
import tempfile
import os

# ----------------- Mock CMDB Data -----------------
data = {
    "Parent/application": ["Pay.sys", "Pay.sys", "Claim.sys"],
    "component": ["Get Payment Amount", "Calculate Due", "Process Claim"],
    "sub component": ["Get Binder Due", "Check Discounts", "Validate ID"],
    "list of all servers app server that syupport application": ["payment-prod", "payment-prod", "claim-prod"],
    "db name": ["prod_pay", "prod_pay", "prod_claim"],
    "environment": ["production", "production", "staging"]
}

df = pd.DataFrame(data)

# ----------------- Build Graph -----------------
G = nx.DiGraph()

node_colors = {
    "application": "red",
    "component": "orange",
    "subcomponent": "yellow",
    "server": "green",
    "database": "blue",
    "environment": "purple"
}

for _, row in df.iterrows():
    app = row["Parent/application"]
    comp = row["component"]
    subcomp = row["sub component"]
    server = row["list of all servers app server that syupport application"]
    db = row["db name"]
    env = row["environment"]

    G.add_node(app, type="application")
    G.add_node(comp, type="component")
    G.add_node(subcomp, type="subcomponent")
    G.add_node(server, type="server")
    G.add_node(db, type="database")
    G.add_node(env, type="environment")

    G.add_edge(app, comp, label="has_component")
    G.add_edge(comp, subcomp, label="has_subcomponent")
    G.add_edge(app, server, label="hosted_on")
    G.add_edge(app, db, label="uses_database")
    G.add_edge(app, env, label="runs_in")

# ----------------- Streamlit UI -----------------
st.set_page_config(page_title="CMDB Knowledge Graph", layout="wide")
st.title("üìä CMDB Knowledge Graph - Interactive View")

app_nodes = [n for n, attr in G.nodes(data=True) if attr["type"] == "application"]
selected_app = st.selectbox("Select an Application to Explore", options=app_nodes)

show_subgraph = st.checkbox("Show Only Related Nodes", value=True)

# ----------------- Subgraph Filtering -----------------
if show_subgraph:
    neighbors = list(G.successors(selected_app)) + [selected_app]
    SG = G.subgraph(neighbors).copy()
else:
    SG = G

# ----------------- Pyvis Graph -----------------
net = Network(height="600px", width="100%", directed=True)

for node, attr in SG.nodes(data=True):
    color = node_colors.get(attr["type"], "gray")
    net.add_node(node, label=node, title=f"{attr['type']}", color=color)

for source, target, attr in SG.edges(data=True):
    net.add_edge(source, target, title=attr["label"], label=attr["label"])

# Save and render
temp_dir = tempfile.mkdtemp()
html_path = os.path.join(temp_dir, "graph.html")
net.save_graph(html_path)

st.components.v1.html(open(html_path, "r", encoding="utf-8").read(), height=600)

# ----------------- Sidebar Info -----------------
st.markdown("### Connected Nodes")
if show_subgraph:
    st.write(f"**{selected_app}** is connected to:")
    for neighbor in G.successors(selected_app):
        st.write(f"- {neighbor} ({G.nodes[neighbor]['type']})")
else:
    st.write("Full graph view enabled.")






















Please analyze this form image and provide detailed information about all elements, organized by logical sections. Also identify the page number if this is a multi-page form.

First, identify:
1. The current page number (if visible)
2. Total number of pages (if indicated)
3. Any form ID or document identifier visible

Then identify the major sections or groups in the form (e.g., "Personal Information", "Contact Details", "Payment Information").

For each section, provide:
1. Section name or title (if visible)
2. Section bounding box in Pascal VOC format [xmin, ymin, xmax, ymax]
3. List of elements contained within this section

For each element within a section, identify and classify as one of the following:
1. Label (text describing a field)
2. Input field (area for entering data)
3. Checkbox
4. Radio button
5. Button
6. Other UI element

For each element, provide:
1. Element classification (from categories above)
2. Text content (if any)
3. Bounding box coordinates in Pascal VOC format [xmin, ymin, xmax, ymax] in absolute pixel values
4. For input fields, indicate if they are empty or filled
5. For checkboxes/radio buttons, indicate if they are checked/selected

Additionally, identify relationships between labels and their corresponding input fields.

Format the response as a JSON structure with:
1. "image": image dimensions (width, height)
2. "page_info": details about page number and total pages
3. "form_identifiers": any visible form IDs or document numbers
4. "sections": array of detected sections, each containing:
   - "name": section name
   - "bndbox": section boundary coordinates
   - "elements": array of elements within this section
5. "relationships": array of label-to-input field connections

All coordinates should be in absolute pixel values, not normalized.















Business-Centric vs Schema-Centric Design

Aspect	Your Approach (Business-Centric)	Other Approach (Schema-Centric / Technical)
Design Philosophy	Built around business use cases and workflows	Built around full schema exposure and technical access
Data Exposure	Curated set of tables and views aligned to business context	Full set of raw tables and relationships exposed
User Experience	Simplified, understandable structure for business users	Complex, requires technical understanding to navigate
Semantic Interpretation	Yes ‚Äì queries are interpreted based on business intent and context	No semantic layer ‚Äì relies on exact table/field understanding
Certified Queries/Views	Yes ‚Äì governed and validated views for consistency and trust	No certification ‚Äì raw queries can vary and be misused
Human-in-the-Loop Approval	Yes ‚Äì optional review before execution in sensitive or ambiguous cases	Not part of core workflow
Ambiguity Detection	Yes ‚Äì flags unclear or underspecified queries	No built-in ambiguity handling
SQL Injection Prevention	Yes ‚Äì protected against unsafe or malformed inputs	Not explicitly addressed
Technical Flexibility	Can configure and expose relationships when needed	Full schema exposed by default, not tailored to business needs
Target Audience	Business users, analysts, SMEs	Developers, DB admins, technical users
Maintenance & Governance	Easier to govern, secure, and scale with business logic	Harder to manage as business needs evolve
Outcome	Trusted, usable, explainable outputs aligned with business questions	Risk of misuse, misjoins, or incorrect results from raw access

























Field Name	Type	Purpose
form_id	UUID / SERIAL	Unique ID for internal reference
form_type	TEXT	Human-readable label (e.g., "Group Health Enrollment")
schema_path	TEXT	Path to the JSON schema file (or embedded JSONB)
text_hash	TEXT	SHA256 fingerprint of the first-page text
domain	TEXT	Optional ‚Äî e.g., "Health", "Claims", "Dental"
owner_org	TEXT	Optional ‚Äî which client/tenant owns this form
version	TEXT	For versioning if forms change (e.g., "v1.0", "2023_Rev")
active	BOOLEAN	If this form version is currently in use
created_at	TIMESTAMP	For tracking form entry
updated_at	TIMESTAMP	For when the schema was last updated



schema_id	UUID / SERIAL	Unique identifier for this schema
form_type	TEXT	Link to the form_registry.form_type
version	TEXT	Schema version (e.g., v1.0, 2023_01)
schema_json	JSONB	The actual baseline schema (embedded as JSON)
is_default	BOOLEAN	Marks the default schema version for this form type
created_at	TIMESTAMP	When the schema was created
updated_at	TIMESTAMP	Last update timestamp



CREATE TABLE form_submissions (
    submission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    form_type TEXT NOT NULL,
    schema_version TEXT DEFAULT 'v1.0',
    ocr_output JSONB,                     -- Raw OCR result before review
    data JSONB NOT NULL,                  -- Final key-value results (after review)
    edited BOOLEAN DEFAULT false,         -- Whether the user edited any field
    edited_fields JSONB,                  -- Optional: track only the fields that were changed
    form_instance_file TEXT,              -- Optional: link to PDF or image
    reviewed_by TEXT,                     -- Who reviewed it
    review_status TEXT,                   -- e.g., "approved", "rejected", "pending"
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
